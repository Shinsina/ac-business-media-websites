import hierarchyAliases from "@mindful-web/marko-web/utils/hierarchy-aliases";
import articleFragment from "../../../graphql/fragments/market-outlook-article";
import navFragment from "../../../graphql/fragments/market-outlook-nav";
import listFragment from "../../../graphql/fragments/market-outlook-list";

$ const { GAM } = out.global;

$ const {
  id,
  alias,
  name,
  pageNode
} = data;

$ const adSlots = ({ aliases }) => ({
  "gpt-ad-lb1": GAM.getAdUnit({ name: "lb1", aliases }),
  "gpt-ad-rail-infinite": GAM.getAdUnit({ name: "infinite-rail" }),
});

$ const listQueryParams = {
  sectionId: id,
  includeContentTypes: ["Document"],
  limit: 0,
  queryFragment: listFragment,
};
$ const navQueryParams = { ...listQueryParams, queryFragment: navFragment };

<marko-web-website-section-page-layout id=id alias=alias name=name>
  <@head>
    <marko-web-gtm-website-section-context|{ context }| alias=alias>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-website-section-context>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-gam-slots slots=adSlots({ aliases }) />
      <marko-web-p1-events-track-website-section node=section />
    </marko-web-resolve-page>
  </@head>
  <@page>
    <marko-web-resolve-page|{ data: section, resolved }| node=pageNode>
      $ const aliases = hierarchyAliases(section);
      <marko-web-page-wrapper>
        <@section>
          <marko-web-gam-display-ad
            id="gpt-ad-lb1"
            slots=adSlots({ aliases })
            modifiers=["max-width-970", "center"]
          />
        </@section>
        <@section>
          <div class="row">
            <div class="col">
              <marko-web-query|{ nodes }|
                name="website-scheduled-content"
                params={
                  sectionId: id,
                  includeContentTypes: ["Article"],
                  limit: 1,
                  queryFragment: articleFragment,
                }
              >
                $ const content = nodes[0];
                <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
                <default-theme-page-contents|{ blockName }|>
                  <marko-web-content-body block-name=blockName obj=content />
                </default-theme-page-contents>
              </marko-web-query>
            </div>
          </div>
        </@section>
        <@section modifiers=["text-center"]>
          <a class="anchor" name="nav" />
          <h2 class="page-wrapper__description">Click to Navigate</h2>
          <marko-web-query|{ nodes }| name="website-scheduled-content" params=navQueryParams>
            $ const blockName = "market-outlook-nav";
            <div class=blockName>
              <for|node| of=nodes>
                <marko-web-content-name block-name=blockName obj=node link={ target: "_self", href: `#content-${node.id}` } />
              </for>
            </div>
          </marko-web-query>
        </@section>
        <@section>
        <div class="row">
          <div class="col-lg-8">
            <marko-web-query|{ nodes }| name="website-scheduled-content" params=listQueryParams>
              <website-market-outlook-flow nodes=nodes />
            </marko-web-query>
          </div>
          <aside class="col-lg-4 page-rail">
            <marko-web-gam-display-ad
              id="gpt-ad-rail-infinite"
              modifiers=["sticky-top", "max-width-300", "margin-auto-x-md"]
              slots=adSlots({ aliases })
            />
          </aside>
        </div>
      </@section>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
  <@foot>
    <marko-web-resolve-page|{ data: section }| node=pageNode>
      <refresh-theme-fixed-ad-bottom aliases=hierarchyAliases(section) />
    </marko-web-resolve-page>
  </@foot>
</marko-web-website-section-page-layout>
