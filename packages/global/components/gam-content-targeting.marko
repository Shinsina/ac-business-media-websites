import hierarchyAliases from "@mindful-web/marko-web/utils/hierarchy-aliases";
import { getAsObject, get, getAsArray } from "@mindful-web/object-path";
import gamContentTags from "../utils/gam-content-tags";

$ const { config, site, req } = out.global;

$ const siteId = get(config, "websiteContext.id");

$ const aliasToChannel = site.get("gam.aliasToChannel") || {}

$ const getChannels = (section) => {
  const aliases = hierarchyAliases(section);
  const channels = aliases.filter((alias) => aliasToChannel[alias] !== undefined).map((alias) => aliasToChannel[alias]);
  return channels;
}

$ const getScheduleChannels = (websiteSchedules = []) => {
  const websiteSchedulesChannels = [];
  if(websiteSchedules.length) {
    websiteSchedules.forEach((schedule) => {
      const section = getAsObject(schedule, "section");
      if (section) websiteSchedulesChannels.push(...getChannels(section));
    });
  };
  return websiteSchedulesChannels;
};

$ const Channels = [];
$ const content = getAsObject(input, "obj");

<!-- add primary section and its hierarcy channels maps -->
$ const { primarySection } = content;
$ if (primarySection) Channels.push(...getChannels(primarySection));

<!-- loop over schedules and their hierarcy channels to map -->
$ const websiteSchedules = getAsArray(content, "websiteSchedules").filter((schedule) => {
 return get(schedule, "section.site.id") === siteId;
});

$ if (websiteSchedules.length !== 0) Channels.push(...getScheduleChannels(websiteSchedules));

$ const { id, type, alias } = content;
$ const companyIds = getAsArray(content, "companies.edges").map(({ node }) => node.id);
$ const companyId = get(content, "company.id");
$ const tags = gamContentTags(content);
$ if (companyId) companyIds.unshift(companyId);

$ const labels = getAsArray(content, "labels");
$ const sponsored = labels.includes("Sponsored");
<!-- If there are no Channels apply the General Fallback value -->
$ if (Channels.length === 0) Channels.push("General");
$ const keyValues = {
  cont_id: id,
  cont_type: type,
  ...(companyIds.length && {
    companies: companyIds.join("|"),
    Company: companyIds.shift(),
  }),
  section: get(content, "primarySection.alias"),
  ...(tags && { tag_list: tags }),
  ...(sponsored && { sponsored: "yes" }),
  Channels: [...new Set(Channels)],
  uri: req.path,
};

<marko-web-gam-targeting key-values=keyValues />
<${input.renderBody} ad-channels=keyValues.Channels />
